/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include<android/log.h>
#include <queue>
#include "com_example_testreflex_NDKReflex.h"
#define TAG "myReflex-jni"
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG ,__VA_ARGS__) // 定义LOGI类型

void printJstring(JNIEnv *env,jstring string);
/*
 * Class:     com_example_testreflex_NDKReflex
 * Method:    reflex1
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_example_testreflex_NDKReflex_reflex1
  (JNIEnv *env, jobject object){
      jclass clazz=env->FindClass("com/example/testreflex/Person");
      //"<init>"为构造方法标识
    LOGI("reflex1");
      jmethodID init1 = env->GetMethodID(clazz, "<init>", "()V");//无参构造函数
      jmethodID setAge= env->GetMethodID(clazz , "setAge","(I)V");
      jmethodID setName= env->GetMethodID(clazz , "setName","(Ljava/lang/String;)V");
      jmethodID toString= env->GetMethodID(clazz , "toString","()Ljava/lang/String;");
      jmethodID myToString= env->GetMethodID(clazz , "myToString","()Ljava/lang/String;");
      jmethodID staticToString= env->GetStaticMethodID(clazz , "staticToString","()Ljava/lang/String;");
      jobject obj=env->NewObject(clazz,init1);
      env->CallVoidMethod(obj,setAge,10);
      env->CallVoidMethod(obj,setName,env->NewStringUTF("I"));
    jstring jtoString= reinterpret_cast<jstring>(env->CallObjectMethod(obj, toString));
    printJstring(env,jtoString);
    jstring jMyString= reinterpret_cast<jstring>(env->CallObjectMethod(obj, myToString));
    printJstring(env,jMyString);
    jstring jstaticToString= reinterpret_cast<jstring>(env->CallStaticObjectMethod(clazz, staticToString));
    printJstring(env,jstaticToString);
  }

  void printJstring(JNIEnv *env,jstring string){
      const char * c_name = env->GetStringUTFChars(reinterpret_cast<jstring>(string), NULL);//转换成 char *
      LOGI("%s",c_name);
}

/*
 * Class:     com_example_testreflex_NDKReflex
 * Method:    reflex2
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_example_testreflex_NDKReflex_reflex2
  (JNIEnv *env, jobject object){
    jclass clazz=env->FindClass("com/example/testreflex/Person");
    //"<init>"为构造方法标识
    LOGI("reflex2");
    jmethodID init1 = env->GetMethodID(clazz, "<init>", "(ILjava/lang/String;)V");//无参构造函数
    jmethodID toString= env->GetMethodID(clazz , "toString","()Ljava/lang/String;");
    jmethodID myToString= env->GetMethodID(clazz , "myToString","()Ljava/lang/String;");
    jmethodID staticToString= env->GetStaticMethodID(clazz , "staticToString","()Ljava/lang/String;");
    jobject obj=env->NewObject(clazz,init1,43,env->NewStringUTF("My Father"));
    jstring jtoString= reinterpret_cast<jstring>(env->CallObjectMethod(obj, toString));
    printJstring(env,jtoString);
    jstring jMyString= reinterpret_cast<jstring>(env->CallObjectMethod(obj, myToString));
    printJstring(env,jMyString);
    jstring jstaticToString= reinterpret_cast<jstring>(env->CallStaticObjectMethod(clazz, staticToString));
    printJstring(env,jstaticToString);
  }

/*
* Class:     com_example_testreflex_NDKReflex
* Method:    reflex3
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_com_example_testreflex_NDKReflex_reflex3
        (JNIEnv *env, jobject object){
    jclass clazz=env->FindClass("com/example/testreflex/Person");
    //"<init>"为构造方法标识
    LOGI("reflex3");
    jmethodID init1 = env->GetMethodID(clazz, "<init>", "()V");//无参构造函数
    jfieldID age=env->GetFieldID(clazz,"age","I");
    jfieldID name=env->GetFieldID(clazz,"name","Ljava/lang/String;");
    jmethodID toString= env->GetMethodID(clazz , "toString","()Ljava/lang/String;");
    jmethodID myToString= env->GetMethodID(clazz , "myToString","()Ljava/lang/String;");
    jmethodID staticToString= env->GetStaticMethodID(clazz , "staticToString","()Ljava/lang/String;");
    jobject obj=env->NewObject(clazz,init1);
    env->SetIntField(obj,age,40);
    env->SetObjectField(obj,name,env->NewStringUTF("My Mother"));
    jstring jtoString= reinterpret_cast<jstring>(env->CallObjectMethod(obj, toString));
    printJstring(env,jtoString);
    jstring jMyString= reinterpret_cast<jstring>(env->CallObjectMethod(obj, myToString));
    printJstring(env,jMyString);
    jstring jstaticToString= reinterpret_cast<jstring>(env->CallStaticObjectMethod(clazz, staticToString));
    printJstring(env,jstaticToString);
}

